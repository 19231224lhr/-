{"remainingRequest":"C:\\Users\\lhr4108\\Desktop\\WebstormProjects\\问卷星球\\test\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\lhr4108\\Desktop\\WebstormProjects\\问卷星球\\test\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\lhr4108\\Desktop\\WebstormProjects\\问卷星球\\test\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\lhr4108\\Desktop\\WebstormProjects\\问卷星球\\test\\src\\components\\TrueWenJuan.vue?vue&type=template&id=4ce49c6c&scoped=true&","dependencies":[{"path":"C:\\Users\\lhr4108\\Desktop\\WebstormProjects\\问卷星球\\test\\src\\components\\TrueWenJuan.vue","mtime":1630281182661},{"path":"C:\\Users\\lhr4108\\Desktop\\WebstormProjects\\问卷星球\\test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\lhr4108\\Desktop\\WebstormProjects\\问卷星球\\test\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\lhr4108\\Desktop\\WebstormProjects\\问卷星球\\test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\lhr4108\\Desktop\\WebstormProjects\\问卷星球\\test\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}